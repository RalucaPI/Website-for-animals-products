/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf --transform
Author: dinomaster (https://sketchfab.com/dinomaster)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animated-bengal-cat-30444a1c97e9411693023c75403b38d8
Title: animated bengal cat
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export function Cat2({ opacity, ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "../animations/cats/cat2/scene-transformed.glb"
  );

  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    actions.AllAnimations.play();
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Sketchfab_model_0" rotation={[-Math.PI / 2, 0, 0]}>
                <group name="root_1">
                  <group
                    name="GLTF_SceneRootNode_2"
                    rotation={[Math.PI / 2, 0, 0]}
                  >
                    <group
                      name="Sketchfab_model_0_3"
                      rotation={[-Math.PI / 2, 0, 0]}
                      scale={1.82}
                    >
                      <group name="root_1_4">
                        <group
                          name="GLTF_SceneRootNode_2_5"
                          rotation={[Math.PI / 2, 0, 0]}
                        >
                          <group name="GLTF_created_0_3_6">
                            <group name="GLTF_created_0_7">
                              <group name="GLTF_created_0">
                                <primitive
                                  object={nodes.GLTF_created_0_rootJoint}
                                />
                                <mesh>
                                  <skinnedMesh
                                    name="Object_108"
                                    geometry={nodes.Object_108.geometry}
                                    material={
                                      materials.GoogleAR_StingrayPBS_StingrayPBS
                                    }
                                    skeleton={nodes.Object_108.skeleton}
                                  ></skinnedMesh>
                                  <shaderMaterial
                                    transparent
                                    envMapIntensity={2}
                                    opacity={opacity}
                                  />
                                </mesh>
                              </group>
                            </group>
                          </group>
                        </group>
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("../animations/cats/cat2/scene-transformed.glb");
